{% extends 'dashboard/base.html.twig' %}
{% block title %}Dashboard{% endblock %}
{% block body %}
    {% include 'dashboard/partials/modal-loading-cached-metrics.html.twig' %}
    <br />
    {% include 'dashboard/partials/tabs.html.twig' with {active_tab: 'ehr'} %}
    <div id="plotly-tabs" class="tab-content">
        <div id="ehr" class="tab-pane pad active fade in">
            <div class="row">
                <div id="ehr-filters" class="col-md-3">
                    {% include 'dashboard/partials/filters.html.twig' with {recruitment_centers: recruitment_centers, id: 'ehr', show_enrollment_status: false} %}
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <h4 class="text-primary">Plot Options</h4>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div class="row form-group-sm">
                                <div class="col-md-6 col-xs-3 form-group form-group-sm">
                                    <label for="ehr-start-date">Start</label>
                                    <input type="text" class="form-control datepicker ehr-time-control" id="ehr-start-date" />
                                </div>
                                <div class="col-md-6 col-xs-3 form-group form-group-sm">
                                    <label for="ehr-end-date">Cutoff</label>
                                    <input type="text" class="form-control datepicker ehr-time-control" id="ehr-end-date" />
                                </div>
                                <div class="col-md-12 col-xs-12 form-group form-group-sm">
                                    <label>Show Column Totals <input type="checkbox" id="ehr-show-annot" class="ehr-plot-control"></label>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="col-md-9">
                  <div id="plotly-ehr-participant" class="plotly-div"></div>
                  <div class="col-md-12">
                    <div class="table-responsive">
                      <div id="table-ehr-participant"></div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-12">
                      <div id="plotly-ehr-organization-count" class="plotly-div"></div>
                      <div class="table-responsive">
                        <div id="table-ehr-organization-count"></div>
                      </div>
                    </div>
                  </div>
                  <div class="row">
                      <div class="col-md-12">
                          <h4 class="text-center">Organization Data</h4>
                          <div class="table-responsive">
                            <div id="table-ehr-organizations"></div>
                          </div>
                      </div>
                  </div>
                </div>
            </div>
        </div>
    </div>
    {% include 'dashboard/partials/modal-dashboard-help.html.twig' %}
{% endblock %}

{% block pagejs %}
<script>

function renderMetricsEhrPlots(dialogType) {
  // throw error if date selection is invalid
  var ehrStartDate = $('#ehr-start-date').val();
  var ehrEndDate = $('#ehr-end-date').val();
  // Restrict min/max dates based on selections
  $(document).ready(function() {
    $('#ehr-end-date').data("DateTimePicker").minDate(ehrStartDate);
    $('#ehr-start-date').data("DateTimePicker").maxDate(ehrEndDate);
    $('#ehr-start-date').on("dp.change", function (e) {
      $('#ehr-end-date').data("DateTimePicker").minDate(e.date);
    });
    $('#tehr-end-date').on("dp.change", function (e) {
      $('#ehr-start-date').data("DateTimePicker").maxDate(e.date);
    });
  });
  if ( new Date(ehrStartDate) > new Date(ehrEndDate)) {
      alert('Your date selection is invalid: The selected cutoff date of ' + ehrEndDate + ' is before ' + ehrStartDate + '. Please select a valid date range.');
      return false;
  }
  var centers = loadRecruitmentFilters('ehr');
  if (centers.length == 0) {
      alert('You must select at least one recruitment center to plot results.');
      return false;
    } else {
        var spinnerLoc = 'plotly-ehr-participants';
        if (dialogType == 'spinner') {
            launchSpinner(spinnerLoc);
        } else if (dialogType == 'modal' ) {
            spinnerLoc = 'modal-spinner-target';
            // empty target in case there was an error message beforehand
            $('#' + spinnerLoc).empty();
            launchSpinner(spinnerLoc);
            $('#loading-modal').modal('show');
        }

        // gather params
        var ehrInterval = $('#ehr-interval').val();
        var showAnnot = $('#ehr-show-annot').is(':checked');
        var ehrParticipantWidth = $('#plotly-ehr-participant').width() - 30;
        var ehrSitesWidth = $('#plotly-ehr-sites').width() - 30;
        if (centers.length == $('#ehr .center-filter').length) {
            centers = [];
        }

        /**
         * Participants Over Time
         */
        $.getJSON('/dashboard/metrics_load_ehr', {
          csrf_token: CsrfToken,
          mode: 'ParticipantsOverTime',
          start_date: ehrStartDate,
          end_date: ehrEndDate,
          interval: 'quarter',
          sites: centers
        })
        .done(function(data) {
            if (data.length != 0) {
                var progressAnnot = [];
                var ehrParticipantLayout = {
                    title: '<b>EHR Consent</b> vs <b>EHR Data</b>',
                    font: PLOTLY_LABEL_FONT,
                    width: ehrParticipantWidth,
                    height: ehrParticipantWidth / 1.66,
                    hovermode: 'closest',
                    annotations: progressAnnot,
                    yaxis: {
                        fixedrange: true
                    },
                    xaxis : {
                        fixedrange: true
                    }
                };

                // load column totals if requested
                if (showAnnot) {
                    loadBarChartAnnotations(data, progressAnnot);
                }

                // load table data
                var ehrParticipantTable = $('#table-ehr-participant');
                loadTableData(ehrParticipantTable, data, ehrParticipantLayout.title);

                // empty div contents in case there had been an error message before
                $('#' + spinnerLoc).empty();

                // render plot, remove plotly link and stop spinner
                Plotly.newPlot('plotly-ehr-participant', data, ehrParticipantLayout, PLOTLY_OPTS);
                removePlotlyLink('plotly-ehr-participant');
                stopSpinner(spinnerLoc);

                if (dialogType == 'modal' ) {
                    $('#loading-modal').modal('hide');
                }

                // set toggle traces switch to on, regardless of previous state
                $('#toggle-traces .toggle-switch').attr('class', 'fa fa-toggle-on toggle-switch');

            } else {
                setMetricsError(spinnerLoc);
            }

        })
        .fail(function(jqXHR) {
          try {
            setMetricsError(spinnerLoc, JSON.parse(jqXHR.responseText).error);
          } catch (e) {
            setMetricsError(spinnerLoc, 'An error occurred while loading the data.');
          }
        });


        /**
         * Organizations Active Over Time
         */
        $.getJSON('/dashboard/metrics_load_ehr', {
          csrf_token: CsrfToken,
          mode: 'OrganizationsActiveOverTime',
          start_date: ehrStartDate,
          end_date: ehrEndDate,
          interval: 'quarter',
          sites: centers
        })
        .done(function(data) {
            if (data.length != 0) {
                var progressAnnot = [];
                var ehrOrganizationCountLayout = {
                    title: '<b>Organizations</b> providing <b>EHR Data</b>',
                    font: PLOTLY_LABEL_FONT,
                    width: ehrSitesWidth,
                    height: ehrSitesWidth / 1.66,
                    hovermode: 'closest',
                    annotations: progressAnnot,
                    yaxis: {
                        fixedrange: true
                    },
                    xaxis : {
                        fixedrange: true
                    }
                };

                // load column totals if requested
                if (showAnnot) {
                    loadBarChartAnnotations(data, progressAnnot);
                }

                // load table data
                var ehrParticipantTable = $('#table-ehr-organization-count');
                loadTableData(ehrParticipantTable, data, ehrOrganizationCountLayout.title);

                // empty div contents in case there had been an error message before
                $('#' + spinnerLoc).empty();

                // render plot, remove plotly link and stop spinner
                Plotly.newPlot('plotly-ehr-organization-count', data, ehrOrganizationCountLayout, PLOTLY_OPTS);
                removePlotlyLink('plotly-ehr-organization-count');
                stopSpinner(spinnerLoc);

                if (dialogType == 'modal' ) {
                    $('#loading-modal').modal('hide');
                }

                // set toggle traces switch to on, regardless of previous state
                $('#toggle-traces .toggle-switch').attr('class', 'fa fa-toggle-on toggle-switch');

            } else {
                setMetricsError(spinnerLoc);
            }

        })
        .fail(function(jqXHR) {
          try {
            setMetricsError(spinnerLoc, JSON.parse(jqXHR.responseText).error);
          } catch (e) {
            setMetricsError(spinnerLoc, 'An error occurred while loading the data.');
          }
        });

        /**
         * Organizations Table
         */
         $.getJSON('/dashboard/metrics_load_ehr', {
           csrf_token: CsrfToken,
           mode: 'Organizations',
           start_date: ehrStartDate,
           end_date: ehrEndDate,
           interval: 'quarter',
           sites: centers
         })
         .done(function(data) {
             if (data.length != 0) {
                 // load column totals if requested
                 if (showAnnot) {
                     loadBarChartAnnotations(data, progressAnnot);
                 }

                 // load table data
                 var ehrOrganizationTable = $('#table-ehr-organizations');
                 $(ehrOrganizationTable).html('<table class="table table-striped"><thead></thead><tbody></tbody></table>')
                 $('thead', ehrOrganizationTable).append('<tr><th>Organization</th><th>Total Participants</th><th>Total Primary Consent</th><th>Total EHR Consent</th><th>Total Core</th><th>Total EHR Data Received</th><th>Last EHR Submission Date</th></tr>');
                 $(data).each(function (i, row) {
                    var organizationRow = $('<tr />')
                    organizationRow.append('<td>' + row.organization_name + '</td>')
                    organizationRow.append('<td>' + row.total_participants + '</td>')
                    organizationRow.append('<td>' + row.total_primary_consented + '</td>')
                    organizationRow.append('<td>' + row.total_ehr_consented + '</td>')
                    organizationRow.append('<td>' + row.total_core_participants + '</td>')
                    organizationRow.append('<td>' + row.total_ehr_data_received + '</td>')
                    organizationRow.append('<td>' + (row.last_ehr_submission_date ? row.last_ehr_submission_date : '-') + '</td>')
                    $('tbody', ehrOrganizationTable).append(organizationRow)
                 });

                 // empty div contents in case there had been an error message before
                 $('#' + spinnerLoc).empty();
             } else {
                 setMetricsError(spinnerLoc);
             }

         })
         .fail(function(jqXHR) {
           try {
             setMetricsError(spinnerLoc, JSON.parse(jqXHR.responseText).error);
           } catch (e) {
             setMetricsError(spinnerLoc, 'An error occurred while loading the data.');
           }
         });
    }
}

var now = new Date();
var nowString = now.toISOString().split('T')[0];
var programStartDate = new Date('May 1, 2018');
var programStartDateString = new Date(programStartDate).toISOString().split('T')[0];
$('#ehr-end-date').val(nowString);
$('#ehr-start-date').val(programStartDateString);

renderMetricsEhrPlots('modal')

// re-render on filter change
$('.ehr-plot-control').on('change', function() {
    renderMetricsEhrPlots('spinner');
});

// re-render on filter change with modal (for time changes, may need new metrics)
$('.ehr-time-control').on('change', function() {
    renderMetricsEhrPlots('modal');
});

// re-render on window resizeEnd if tab is visible
$( window ).on('resizeEnd', function() {
    if ($('#plotly-ehr-participant').is(':visible')) {
        renderMetricsEhrPlots('');
    }
});

$('#ehr-participant').find('.redraw-plotly').on('click', function() {
    renderMetricsEhrPlots('spinner');
});
</script>
{% endblock %}
