{% extends 'dashboard/base.html.twig' %}
{% block title %}Dashboard{% endblock %}
{% block body %}
    {% include 'dashboard/partials/modal-loading-cached-metrics.html.twig' %}
    <br />
    {% include 'dashboard/partials/tabs.html.twig' with {active_tab: 'real-time'} %}
    <div id="plotly-tabs" class="tab-content">
        <div id="real-time" class="tab-pane pad active fade in">
            <div class="row">
                <div id="real-time-filters" class="col-md-3">
                    {% include 'dashboard/partials/filters.html.twig' with {id: 'real-time', show_organizations: false, show_recruitment_centers: true, recruitment_centers: recruitment_centers, show_enrollment_status: true} %}
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <h4 class="text-primary">Plot Options</h4>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div class="row form-group-sm">
                                <div class="col-md-6 col-xs-3 form-group form-group-sm">
                                    <label for="real-time-start-date">Start</label>
                                    <input type="text" class="form-control datepicker real-time-time-control" id="real-time-start-date" />
                                </div>
                                <div class="col-md-6 col-xs-3 form-group form-group-sm">
                                    <label for="real-time-end-date">Cutoff</label>
                                    <input type="text" class="form-control datepicker real-time-time-control" id="real-time-end-date" />
                                </div>
                                <div class="col-md-12 col-xs-3 form-group form-group-sm">
                                    <label for="real-time-interval">Interval</label>
                                    <select id="real-time-interval" class="form-control real-time-control">
                                        <option value="DAY">Days</option>
                                        <option value="WEEK">Weeks</option>
                                        <option value="MONTH">Months</option>
                                    </select>
                                </div>
                                <div class="col-md-12 col-xs-12 form-group form-group-sm">
                                    <label>Show Column Totals <input type="checkbox" id="real-time-show-annot" class="real-time-control"></label>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <div style="text-align: center;">
                    <span><i>Latency < 1 hour</i></span>
                    <i class="fa fa-info-circle text-info" style="cursor: pointer; margin-left: 0.3em" id="real-time-data-help"></i>
                </div>
                <div id="plotly-real-time" class="col-md-9 plotly-div"></div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <h4 class="text-center">Raw Data</h4>
                    <div class="table-responsive">
                        <div id="real-time-table"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% include 'dashboard/partials/modal-dashboard-help.html.twig' %}
{% endblock %}

{% block pagejs %}
<script type="text/javascript">
  // function to grab current filter values and load JSON from load_map_data REST endpoint
  // success handler calls Plotly.newplot()
  function renderRealTimePlot(dialogType) {
    // throw error if date selection is invalid
    var tpStartDate = $('#real-time-start-date').val();
    var tpEndDate = $('#real-time-end-date').val();

    // Restrict min/max dates based on selections
    $(document).ready(function() {
      $('#real-time-end-date').data("DateTimePicker").minDate(tpStartDate);
      $('#real-time-start-date').data("DateTimePicker").maxDate(tpEndDate);

      $('#real-time-start-date').on("dp.change", function (e) {
        $('#real-time-end-date').data("DateTimePicker").minDate(e.date);
      });
      $('#real-time-end-date').on("dp.change", function (e) {
        $('#real-time-start-date').data("DateTimePicker").maxDate(e.date);
      });
    });

    if ( new Date(tpStartDate) > new Date(tpEndDate)) {
      alert('Your date selection is invalid: The selected cutoff date of ' + tpEndDate + ' is before ' + tpStartDate + '. Please select a valid date range.');
      return false;
    }
    var centers = loadRecruitmentFilters('real-time');
    var enrollmentStatuses = loadEnrollmentFilters('real-time');
    if (centers.length == 0) {
      alert('You must select at least one recruitment center to plot results.');
      return false;
    }

    var spinnerLoc = 'plotly-real-time';
    if (dialogType == 'spinner') {
      launchSpinner(spinnerLoc);
    } else if (dialogType == 'modal' ) {
      spinnerLoc = 'modal-spinner-target';
      // empty target in case there was an error message beforehand
      $('#' + spinnerLoc).empty();
      launchSpinner(spinnerLoc);
      $('#loading-modal').modal('show');
    }

    // Restrict users to a 100 day date range for real-time requests
    if (moment(tpEndDate).diff(moment(tpStartDate), 'days') > 100) {
      setMetricsError(spinnerLoc, 'Please select a date range less than 100 days');
      return false;
    }

    // gather params
    var tpInterval = $('#real-time-interval').val();
    var metricTitle = $('#real-time-metric-attribute option:selected').text();
    var showAnnot = $('#real-time-show-annot').is(':checked');
    var tpWidth = $('#plotly-real-time').width() - 30;
    if (centers.length == $('#real-time .center-filter').length) {
      centers = [''];
    }

    // load data from metrics API
    $.getJSON('/dashboard/metrics_load', {
      csrf_token: CsrfToken,
      stratification: 'ENROLLMENT_STATUS',
      interval: tpInterval,
      start_date: tpStartDate,
      end_date: tpEndDate,
      centers: centers,
      enrollment_statuses: enrollmentStatuses
    })
    .done(function(data) {
      if (data.length != 0) {
        var progressAnnot = [];
        var tpLayout = {
          title: 'Count of <b>enrollment status</b> by date',
          font: PLOTLY_LABEL_FONT,
          barmode: 'stack',
          width: tpWidth,
          height: tpWidth / 1.66,
          hovermode: 'closest',
          annotations: progressAnnot,
          yaxis: {
            fixedrange: true
          },
          xaxis : {
            fixedrange: true
          }
        };

        // load column totals if requested
        if (showAnnot) {
          loadBarChartAnnotations(data, progressAnnot);
        }

        // load table data
        var tpTable = $('#real-time-table');
        loadTableData(tpTable, data, metricTitle);

        // empty div contents in case there had been an error message before
        $('#' + spinnerLoc).empty();

        // render plot, remove plotly link and stop spinner
        Plotly.newPlot('plotly-real-time', data, tpLayout, PLOTLY_OPTS);
        removePlotlyLink('plotly-real-time');
        stopSpinner(spinnerLoc);

        if (dialogType == 'modal' ) {
          $('#loading-modal').modal('hide');
        }

        // set toggle traces switch to on, regardless of previous state
        $('#toggle-traces .toggle-switch').attr('class', 'fa fa-toggle-on toggle-switch');

      } else {
        if (data.length === 0) {
          setMetricsError(spinnerLoc);
        }
      }

    })
    .fail(function(jqXHR) {
      try {
        setMetricsError(spinnerLoc, JSON.parse(jqXHR.responseText).error);
      } catch (e) {
        setMetricsError(spinnerLoc, 'An error occurred while loading the data.');
      }
    });
  }

  $('#toggle-traces').on('click', function() {
    togglePlotlyTraces('plotly-real-time');
  });

  var now = new Date();
  var nowString = now.toISOString().split('T')[0];
  var lastWeek = new Date().setDate(now.getDate() - 6);
  var lastWeekStr = new Date(lastWeek).toISOString().split('T')[0];
  $('#real-time-end-date').val(nowString);
  $('#real-time-start-date').val(lastWeekStr);

  // if plot has not been shown yet, render and then store state
  // this will prevent points render calls once map has been initialized
  if (!PLOTS_SHOWN['real-time-nav']) {
    renderRealTimePlot('spinner');
    PLOTS_SHOWN['real-time-nav'] = true;
  }

  // re-render on filter change
  $('.real-time-control').on('change', function() {
    renderRealTimePlot('spinner');
  });

  // re-render on time filter change with modal (may need new metrics)
  $('.real-time-time-control').on('change', function() {
    renderRealTimePlot('modal');
  });

  // re-render on window resizeEnd if tab is visible
  $( window ).on('resizeEnd', function() {
    if ($('#real-time').is(':visible')) {
      renderRealTimePlot('');
    }
  });

  $('#real-time').find('.redraw-plotly').on('click', function() {
    renderRealTimePlot('spinner');
  });
</script>
{% endblock %}
