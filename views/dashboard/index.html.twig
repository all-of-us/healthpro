{% extends 'dashboard/base.html.twig' %}
{% block title %}Dashboard{% endblock %}
{% block body %}
    <h2 id="dashboard-heading"><i class="fa fa-tachometer" aria-hidden="true"></i> Dashboard <i class="fa fa-question-circle text-info pull-right" style="cursor: pointer;" id="dashboard-help"></i> </h2>
    <div class="modal fade" id="loading-modal" tabindex="-1" role="dialog" aria-labelledby="loading-modal" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <h4 class="alert alert-warning text-center">Refreshing cached metrics - this may take a while...</h4>
                    <div id="modal-spinner-target" style="min-height: 200px; position: relative; margin: 20px 0;"></div>
                </div>
                <div class="modal-footer">
                    <button class="close" data-dismiss="modal">Ã—</button>
                </div>
            </div>
        </div>
    </div>
    <br />
    <ul class="nav nav-tabs top-pad" role="tablist">
        <li role="presentation" class="active"><a href="#total-progress" role="tab" data-toggle="tab" id="total-progress-nav"><span class="fa fa-users"></span> Total Progress to Date</a></li>
        <li role="presentation"><a href="#real-time" role="tab" data-toggle="tab" id="real-time-nav"><span class="fa fa-clock-o"></span> Real-Time Data</a></li>
        <li role="presentation"><a href="#participants-by-region" role="tab" data-toggle="tab" id="participants-by-region-nav"><span class="fa fa-globe"></span> Full Participants by Region</a></li>
        <li role="presentation"><a href="#participants-by-lifecycle" role="tab" data-toggle="tab" id="participants-by-lifecycle-nav"><span class="fa fa-sitemap"></span> Participants by Lifecycle Phase</a></li>
    </ul>
    <div id="plotly-tabs" class="tab-content">
        <div id="total-progress" class="tab-pane pad active fade in">
            <div class="row">
                <div id="total-progress-filters" class="col-md-3">
                    {% include 'dashboard/filters.html.twig' with {recruitment_centers: recruitment_centers, id: 'total-progress'} %}
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <h4 class="text-primary">Plot Options</h4>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div class="row form-group-sm">
                                <div class="col-md-12 col-xs-3 form-group form-group-sm">
                                    <label for="total-progress-metric-attribute">
                                        Display Metric
                                        <i class="fa fa-question-circle text-info pull-right" style="cursor: pointer;" id="display-metrics-help"></i>
                                    </label>
                                    <select id="total-progress-metric-attribute" class="form-control total-progress-control">
                                        {% for metric_key, display_val in metrics_attributes %}
                                            <option value="{{ metric_key }}">{{ display_val }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <div class="col-md-6 col-xs-3 form-group form-group-sm">
                                    <label for="total-progress-start-date">Start</label>
                                    <input type="text" class="form-control datepicker total-progress-time-control" id="total-progress-start-date" />
                                </div>
                                <div class="col-md-6 col-xs-3 form-group form-group-sm">
                                    <label for="total-progress-end-date">Cutoff</label>
                                    <input type="text" class="form-control datepicker total-progress-time-control" id="total-progress-end-date" />
                                </div>
                                <div class="col-md-12 col-xs-3 form-group form-group-sm">
                                    <label for="total-progress-interval">Interval</label>
                                    <select id="total-progress-interval" class="form-control total-progress-control">
                                        <option value="DAY">Days</option>
                                        <option value="WEEK">Weeks</option>
                                        <option value="MONTH">Months</option>
                                    </select>
                                </div>
                                <div class="col-md-12 col-xs-12 form-group form-group-sm">
                                    <label>Show Column Totals <input type="checkbox" id="total-progress-show-annot" class="total-progress-control"></label>
                                </div>
                                <div class="col-md-12 col-xs-12 form-group form-group-sm">
                                    <label>Toggle Categories <i class="fa fa-question-circle" title="Click to toggle all categories, or toggle individual categories by clicking the legend entry" data-toggle="tooltip"></i> </label>
                                    <a href="javascript:;" class="btn btn-default btn-sm" id="toggle-traces" >&nbsp;<i class='fa fa-toggle-on toggle-switch'></i></a>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <div id="plotly-total-progress" class="col-md-9 plotly-div"></div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <h4 class="text-center">Raw Data</h4>
                    <div class="table-responsive">
                        <div id="total-progress-table"></div>
                    </div>
                </div>
            </div>
            <script type="text/javascript">
                // TODO: Move this code into dashboard.js

                // function to grab current filter values and load JSON from load_map_data REST endpoint
                // success handler calls Plotly.newplot()
                function renderTotalProgressPlot(dialogType) {
                    // throw error if date selection is invalid
                    var tpStartDate = $('#total-progress-start-date').val();
                    var tpEndDate = $('#total-progress-end-date').val();

                    // Restrict min/max dates based on selections
                    $(document).ready(function() {
                      $('#total-progress-end-date').data("DateTimePicker").minDate(tpStartDate);
                      $('#total-progress-start-date').data("DateTimePicker").maxDate(tpEndDate);

                      $('#total-progress-start-date').on("dp.change", function (e) {
                        $('#total-progress-end-date').data("DateTimePicker").minDate(e.date);
                      });
                      $('#total-progress-end-date').on("dp.change", function (e) {
                        $('#total-progress-start-date').data("DateTimePicker").maxDate(e.date);
                      });
                    });

                    if ( new Date(tpStartDate) > new Date(tpEndDate)) {
                        alert('Your date selection is invalid: The selected cutoff date of ' + tpEndDate + ' is before ' + tpStartDate + '. Please select a valid date range.');
                        return false;
                    }
                    var centers = loadRecruitmentFilters('total-progress');
                    if (centers.length == 0) {
                        alert('You must select at least one recruitment center to plot results.');
                        return false;
                    } else {
                        var spinnerLoc = 'plotly-total-progress';
                        if (dialogType == 'spinner') {
                            launchSpinner(spinnerLoc);
                        } else if (dialogType == 'modal' ) {
                            spinnerLoc = 'modal-spinner-target';
                            // empty target in case there was an error message beforehand
                            $('#' + spinnerLoc).empty();
                            launchSpinner(spinnerLoc);
                            $('#loading-modal').modal('show');
                        }

                        // gather params
                        var metricAttr = $('#total-progress-metric-attribute').val();
                        var tpInterval = $('#total-progress-interval').val();
                        var metricTitle = $('#total-progress-metric-attribute option:selected').text();
                        var showAnnot = $('#total-progress-show-annot').is(':checked');
                        var tpWidth = $('#plotly-total-progress').width() - 30;
                        if (centers.length == $('#total-progress .center-filter').length) {
                            centers = ['ALL'];
                        }

                        // load data from metrics API
                        $.getJSON('/dashboard/metrics_load?csrf_token={{ csrf_token('dashboard') }}&metrics_attribute=' + metricAttr + '&interval=' + tpInterval + '&start_date=' + tpStartDate + '&end_date=' + tpEndDate + '&centers=' + centers, function(data) {
                            if (data.length != 0) {
                                var progressAnnot = [];
                                var tpLayout = {
                                    title: 'Count of <b>' + metricTitle.toLowerCase() + '</b> by date',
                                    font: PLOTLY_LABEL_FONT,
                                    barmode: 'stack',
                                    width: tpWidth,
                                    height: tpWidth / 1.66,
                                    hovermode: 'closest',
                                    annotations: progressAnnot,
                                    yaxis: {
                                        fixedrange: true
                                    },
                                    xaxis : {
                                        fixedrange: true
                                    }
                                };

                                // load column totals if requested
                                if (showAnnot) {
                                    loadBarChartAnnotations(data, progressAnnot);
                                }

                                // load table data
                                var tpTable = $('#total-progress-table');
                                loadTableData(tpTable, data, metricTitle);

                                // empty div contents in case there had been an error message before
                                $('#' + spinnerLoc).empty();

                                // render plot, remove plotly link and stop spinner
                                Plotly.newPlot('plotly-total-progress', data, tpLayout, PLOTLY_OPTS);
                                removePlotlyLink('plotly-total-progress');
                                stopSpinner(spinnerLoc);

                                if (dialogType == 'modal' ) {
                                    $('#loading-modal').modal('hide');
                                }

                                // set toggle traces switch to on, regardless of previous state
                                $('#toggle-traces .toggle-switch').attr('class', 'fa fa-toggle-on toggle-switch');

                            } else {
                                setMetricsError(spinnerLoc);
                            }

                        });
                    }
                }

                $('#toggle-traces').on('click', function() {
                    togglePlotlyTraces('plotly-total-progress');
                });

                var now = new Date();
                var nowString = now.toISOString().split('T')[0];
                var lastWeek = new Date().setDate(now.getDate() - 6);
                var lastWeekStr = new Date(lastWeek).toISOString().split('T')[0];
                $('#total-progress-end-date').val(nowString);
                $('#total-progress-start-date').val(lastWeekStr);
                renderTotalProgressPlot('modal');
                PLOTS_SHOWN['total-progress-nav'] = true;

                // load plot on tab show (to save loading time)
                $('#total-progress-nav').on('shown.bs.tab', function (e) {
                    // if plot has not been shown yet, render and then store state
                    // this will prevent points render calls once map has been initialized
                    if (!PLOTS_SHOWN['total-progress-nav']) {
                        renderTotalProgressPlot('spinner');
                        PLOTS_SHOWN['total-progress-nav'] = true;
                    }
                });

                // re-render on filter change
                $('.total-progress-control').on('change', function() {
                    renderTotalProgressPlot('spinner');
                });

                // re-render on time filter change with modal (may need new metrics)
                $('.total-progress-time-control').on('change', function() {
                    renderTotalProgressPlot('modal');
                });

                // re-render on window resizeEnd if tab is visible
                $( window ).on('resizeEnd', function() {
                    if ($('#total-progress').is(':visible')) {
                        renderTotalProgressPlot('');
                    }
                });

                $('#total-progress').find('.redraw-plotly').on('click', function() {
                    renderTotalProgressPlot('spinner');
                });
            </script>
        </div>
        <div id="real-time" class="tab-pane pad fade">
            <div class="row">
                <div id="real-time-filters" class="col-md-3">
                    {% include 'dashboard/filters.html.twig' with {recruitment_centers: recruitment_centers, id: 'real-time'} %}
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <h4 class="text-primary">Plot Options</h4>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div class="row form-group-sm">
                                <div class="col-md-6 col-xs-3 form-group form-group-sm">
                                    <label for="real-time-start-date">Start</label>
                                    <input type="text" class="form-control datepicker real-time-time-control" id="real-time-start-date" />
                                </div>
                                <div class="col-md-6 col-xs-3 form-group form-group-sm">
                                    <label for="real-time-end-date">Cutoff</label>
                                    <input type="text" class="form-control datepicker real-time-time-control" id="real-time-end-date" />
                                </div>
                                <div class="col-md-12 col-xs-3 form-group form-group-sm">
                                    <label for="real-time-interval">Interval</label>
                                    <select id="real-time-interval" class="form-control real-time-control">
                                        <option value="DAY">Days</option>
                                        <option value="WEEK">Weeks</option>
                                        <option value="MONTH">Months</option>
                                    </select>
                                </div>
                                <div class="col-md-12 col-xs-12 form-group form-group-sm">
                                    <label>Show Column Totals <input type="checkbox" id="real-time-show-annot" class="real-time-control"></label>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <div style="text-align: center;">
                    <span><i>Latency < 1 hour</i></span>
                    <i class="fa fa-info-circle text-info" style="cursor: pointer; margin-left: 0.3em" id="real-time-data-help"></i>
                </div>
                <div id="plotly-real-time" class="col-md-9 plotly-div"></div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <h4 class="text-center">Raw Data</h4>
                    <div class="table-responsive">
                        <div id="real-time-table"></div>
                    </div>
                </div>
            </div>
            <script type="text/javascript">
              // function to grab current filter values and load JSON from load_map_data REST endpoint
              // success handler calls Plotly.newplot()
              function renderRealTimePlot(dialogType) {
                // throw error if date selection is invalid
                var tpStartDate = $('#real-time-start-date').val();
                var tpEndDate = $('#real-time-end-date').val();

                // Restrict min/max dates based on selections
                $(document).ready(function() {
                  $('#real-time-end-date').data("DateTimePicker").minDate(tpStartDate);
                  $('#real-time-start-date').data("DateTimePicker").maxDate(tpEndDate);

                  $('#real-time-start-date').on("dp.change", function (e) {
                    $('#real-time-end-date').data("DateTimePicker").minDate(e.date);
                  });
                  $('#real-time-end-date').on("dp.change", function (e) {
                    $('#real-time-start-date').data("DateTimePicker").maxDate(e.date);
                  });
                })

                if ( new Date(tpStartDate) > new Date(tpEndDate)) {
                  alert('Your date selection is invalid: The selected cutoff date of ' + tpEndDate + ' is before ' + tpStartDate + '. Please select a valid date range.');
                  return false;
                }
                var centers = loadRecruitmentFilters('real-time');
                var enrollmentStatuses = loadEnrollmentFilters('real-time');
                if (centers.length == 0) {
                  alert('You must select at least one recruitment center to plot results.');
                  return false;
                } else {
                  var spinnerLoc = 'plotly-real-time';
                  if (dialogType == 'spinner') {
                    launchSpinner(spinnerLoc);
                  } else if (dialogType == 'modal' ) {
                    spinnerLoc = 'modal-spinner-target';
                    // empty target in case there was an error message beforehand
                    $('#' + spinnerLoc).empty();
                    launchSpinner(spinnerLoc);
                    $('#loading-modal').modal('show');
                  }

                  // gather params
                  var tpInterval = $('#real-time-interval').val();
                  var metricTitle = $('#real-time-metric-attribute option:selected').text();
                  var showAnnot = $('#real-time-show-annot').is(':checked');
                  var tpWidth = $('#plotly-real-time').width() - 30;
                  if (centers.length == $('#real-time .center-filter').length) {
                    centers = [''];
                  }

                  // load data from metrics API
                  $.getJSON('/dashboard/metrics2_load?csrf_token={{ csrf_token('dashboard') }}&stratification=ENROLLMENT_STATUS&interval=' + tpInterval + '&start_date=' + tpStartDate + '&end_date=' + tpEndDate + '&centers=' + centers + '&enrollment_statuses=' + enrollmentStatuses, function(data) {
                    if (data.length != 0) {
                      var progressAnnot = [];
                      var tpLayout = {
                        title: 'Count of <b>enrollment status</b> by date',
                        font: PLOTLY_LABEL_FONT,
                        barmode: 'stack',
                        width: tpWidth,
                        height: tpWidth / 1.66,
                        hovermode: 'closest',
                        annotations: progressAnnot,
                        yaxis: {
                          fixedrange: true
                        },
                        xaxis : {
                          fixedrange: true
                        }
                      };

                      // load column totals if requested
                      if (showAnnot) {
                        loadBarChartAnnotations(data, progressAnnot);
                      }

                      // load table data
                      var tpTable = $('#real-time-table');
                      loadTableData(tpTable, data, metricTitle);

                      // empty div contents in case there had been an error message before
                      $('#' + spinnerLoc).empty();

                      // render plot, remove plotly link and stop spinner
                      Plotly.newPlot('plotly-real-time', data, tpLayout, PLOTLY_OPTS);
                      removePlotlyLink('plotly-real-time');
                      stopSpinner(spinnerLoc);

                      if (dialogType == 'modal' ) {
                        $('#loading-modal').modal('hide');
                      }

                      // set toggle traces switch to on, regardless of previous state
                      $('#toggle-traces .toggle-switch').attr('class', 'fa fa-toggle-on toggle-switch');

                    } else {
                      if (data.length === 0) {
                        setMetricsError(spinnerLoc);
                      }
                    }

                  })
                    .fail(function(jqXHR) {
                      try {
                        setMetricsError(spinnerLoc, JSON.parse(jqXHR.responseText).error);
                      } catch (e) {
                        setMetricsError(spinnerLoc, 'An error occurred while loading data the data');
                      }
                    });
                }
              }

              $('#toggle-traces').on('click', function() {
                togglePlotlyTraces('plotly-real-time');
              });

              var now = new Date();
              var nowString = now.toISOString().split('T')[0];
              var lastWeek = new Date().setDate(now.getDate() - 6);
              var lastWeekStr = new Date(lastWeek).toISOString().split('T')[0];
              $('#real-time-end-date').val(nowString);
              $('#real-time-start-date').val(lastWeekStr);

              // load plot on tab show (to save loading time)
              $('#real-time-nav').on('shown.bs.tab', function (e) {
                // if plot has not been shown yet, render and then store state
                // this will prevent points render calls once map has been initialized
                if (!PLOTS_SHOWN['real-time-nav']) {
                  renderRealTimePlot('spinner');
                  PLOTS_SHOWN['real-time-nav'] = true;
                }
              });

              // re-render on filter change
              $('.real-time-control').on('change', function() {
                renderRealTimePlot('spinner');
              });

              // re-render on time filter change with modal (may need new metrics)
              $('.real-time-time-control').on('change', function() {
                renderRealTimePlot('modal');
              });

              // re-render on window resizeEnd if tab is visible
              $( window ).on('resizeEnd', function() {
                if ($('#real-time').is(':visible')) {
                  renderRealTimePlot('');
                }
              });

              $('#real-time').find('.redraw-plotly').on('click', function() {
                renderRealTimePlot('spinner');
              });
            </script>
        </div>
        <div id="participants-by-region" class="tab-pane pad fade">
            <div class="row">
                <div id="participants-by-region-filters" class="col-md-3">
                    {% include 'dashboard/filters.html.twig' with {recruitment_centers: recruitment_centers, id: 'participants-by-region'} %}
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <h4 class="text-primary">Plot Options</h4>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div class="row form-group-sm">
                                <div class="col-md-12 col-xs-4 form-group form-group-sm">
                                    <label for="map-mode">Display Metric</label>
                                    <select class="form-control region-plot-control" id="map-mode">
                                        <option value="FullParticipant.state" selected>State</option>
                                        <option value="FullParticipant.censusRegion">Census Region</option>
                                        <option value="FullParticipant.hpoId">Recruitment Origin</option>
                                    </select>
                                </div>
                                <div class="col-md-12 col-xs-4 form-group form-group-sm">
                                    <label for="region-plot-end-date">Cutoff</label>
                                    <input type="text" class="form-control datepicker region-plot-time-control" id="region-plot-end-date" />
                                </div>
                                <div id="color-profile-select" class="col-md-12 col-xs-4 form-group form-group-sm">
                                    <label for="map-color-profile">Color Profile <span class="fa fa-question-circle-o" data-toggle="tooltip" title="Only applies to states and census regions maps"></span></label>
                                    <select class="form-control region-plot-control" id="map-color-profile">
                                        {% for color in color_profiles %}
                                            {% if color == 'Custom' %}
                                                <option value="{{ color }}" selected>{{ color }}</option>
                                            {% else %}
                                                <option value="{{ color }}">{{ color }}</option>
                                            {% endif %}
                                        {% endfor %}
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="plotly-participants-by-region" class="col-md-9 plotly-div"></div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <h4 class="text-center">Raw Data</h4>
                    <div class="table-responsive">
                        <div id="participants-by-region-table"></div>
                    </div>
                </div>
            </div>

            <script type="text/javascript">
                // function to grab current filter values and load JSON from load_map_data REST endpoint
                // success handler calls Plotly.newplot()
                function renderMapPlot(dialogType) {
                    var regionCenters = loadRecruitmentFilters('participants-by-region');
                    if (regionCenters.length == 0) {
                        alert('You must select at least one recruitment center to plot results');
                        return false;
                    } else {
                        var spinnerLoc = 'plotly-participants-by-region';
                        if (dialogType == 'spinner') {
                            launchSpinner(spinnerLoc);
                        } else if (dialogType == 'modal' ) {
                            spinnerLoc = 'modal-spinner-target';
                            // empty target in case there was an error message beforehand
                            $('#' + spinnerLoc).empty();
                            launchSpinner(spinnerLoc);
                            $('#loading-modal').modal('show');
                        }
                        // gather params
                        var mapWidth = $('#plotly-participants-by-region').width() - 30;
                        var mapCutoff = $('#region-plot-end-date').val();
                        var mapMode = $('#map-mode').val();
                        var mapModeText = $('#map-mode option:selected').text();
                        var mapColor = $('#map-color-profile').val();
                        if (regionCenters.length == $('#participants-by-region .center-filter').length) {
                            regionCenters = ['ALL'];
                        }

                        if (mapMode == 'FullParticipant.hpoId') {
                            $('#map-color-profile').prop('disabled', true);
                        } else {
                            $('#map-color-profile').prop('disabled', false);
                        }

                        // load data from metrics API
                        $.getJSON('/dashboard/metrics_load_region?csrf_token={{ csrf_token('dashboard') }}&map_mode=' + mapMode + '&end_date=' + mapCutoff + '&centers=' + regionCenters + '&color_profile=' + mapColor, function (data) {
                            if (data.length != 0) {
                                if (mapModeText != 'Recruitment Origin') {
                                    mapModeText += ' of residence'
                                }
                                var mapLayout = {
                                    title: "Percentage of target <b>full participants</b> by <b>" + mapModeText.toLowerCase() + '</b> as of ' + mapCutoff,
                                    font: PLOTLY_LABEL_FONT,
                                    width: mapWidth,
                                    height: mapWidth / 1.66,
                                    geo: GEO_OPTS
                                };

                                // empty div contents in case there had been an error message before
                                $('#' + spinnerLoc).empty();

                                // load table data
                                var regionTable = $('#participants-by-region-table');
                                loadRegionTableData(regionTable, data, mapMode, mapModeText);

                                // render plot and stop spinner
                                Plotly.newPlot('plotly-participants-by-region', data, mapLayout, PLOTLY_OPTS);
                                removePlotlyLink('plotly-participants-by-region');
                                stopSpinner(spinnerLoc);

                                if (dialogType == 'modal') {
                                    $('#loading-modal').modal('hide');
                                }

                            } else {
                                setMetricsError(spinnerLoc);
                            }
                        });
                    }
                }

                var now = new Date().toISOString().split('T')[0];
                $('#region-plot-end-date').val(now);

                // load plot on tab show (to save loading time)
                $('#participants-by-region-nav').on('shown.bs.tab', function (e) {
                    // if plot has not been shown yet, render and then store state
                    // this will prevent points render calls once map has been initialized
                    if (!PLOTS_SHOWN['participants-by-region-nav']) {
                        renderMapPlot('spinner');
                        PLOTS_SHOWN['participants-by-region-nav'] = true;
                    }
                });

                // re-render on filter change
                $('.region-plot-control').on('change', function() {
                    renderMapPlot('spinner');
                });

                // re-render on filter change with modal (for time changes, may need new metrics)
                $('.region-plot-time-control').on('change', function() {
                    renderMapPlot('modal');
                });

                // re-render on window resizeEnd if tab is visible
                $( window ).on('resizeEnd', function() {
                    if ($('#plotly-participants-by-region').is(':visible')) {
                        renderMapPlot('');
                    }
                });

                $('#participants-by-region').find('.redraw-plotly').on('click', function() {
                    renderMapPlot('spinner');
                });
            </script>
        </div>
        <div id="participants-by-lifecycle" class="tab-pane pad fade">
            <div class="row">
                <div class="col-md-3">
                    {% include 'dashboard/filters.html.twig' with {recruitment_centers: recruitment_centers, id: 'participants-by-lifecycle'} %}
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <h4 class="text-primary">Plot Options</h4>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div class="row form-group-sm">
                                <div class="col-md-12 col-xs-12 form-group form-group-sm">
                                    <label for="lifecycle-end-date">Cutoff</label>
                                    <input type="text" class="form-control lifecycle-time-control datepicker" id="lifecycle-end-date" />
                                </div>
                                <div class="col-md-12 col-xs-12 form-group form-group-sm">
                                    <label>Show Column Totals <input type="checkbox" id="lifecycle-plot-show-annot" class="lifecycle-plot-control"></label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-9 plotly-div" id="plotly-participants-by-lifecycle"></div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <h4 class="text-center">Raw Data</h4>
                    <div class="table-responsive">
                        <div id="participants-by-lifecycle-table"></div>
                    </div>
                </div>
            </div>

            <script type="text/javascript">
                // function to grab current filter values and load JSON from load_map_data REST endpoint
                // success handler calls Plotly.newplot()
                function renderLcPlot(dialogType) {
                    var lifecycleCenters = loadRecruitmentFilters('participants-by-lifecycle');
                    if (lifecycleCenters.length == 0) {
                        alert('You must select at least one recruitment center to plot results');
                        return false;
                    } else {
                        var lcWidth = $('#plotly-participants-by-lifecycle').width() - 30;
                        var spinnerLoc = 'plotly-participants-by-lifecycle';
                        if (dialogType == 'spinner') {
                            launchSpinner(spinnerLoc);
                        } else if (dialogType == 'modal') {
                            spinnerLoc = 'modal-spinner-target';
                            // empty target in case there was an error message beforehand
                            $('#' + spinnerLoc).empty();
                            launchSpinner(spinnerLoc);
                            $('#loading-modal').modal('show');
                        }
                        var lcEndDate = $('#lifecycle-end-date').val();
                        var lcShowAnnot = $('#lifecycle-plot-show-annot').is(':checked');

                        if (lifecycleCenters.length == $('#participants-by-lifecycle .center-filter').length) {
                            lifecycleCenters = ['ALL'];
                        }

                        $.getJSON('/dashboard/metrics_load_lifecycle?csrf_token={{ csrf_token('dashboard') }}&end_date=' + lcEndDate + '&centers=' + lifecycleCenters, function (data) {
                            if (data.length != 0) {
                                var lcAnnot = [];
                                var lcTitle = 'Participant registrations by <b>lifecycle phase</b> as of ' + lcEndDate;
                                var lcLayout = {
                                    title: lcTitle,
                                    font: PLOTLY_LABEL_FONT,
                                    barmode: 'stack',
                                    width: lcWidth,
                                    height: lcWidth / 1.66,
                                    annotations: lcAnnot,
                                    xaxis: {
                                        tickangle: -45,
                                        fixedrange: true
                                    },
                                    yaxis: {
                                        fixedrange: true
                                    },
                                    margin: {
                                        b: 150,
                                        pad: 5
                                    }
                                };

                                // load column totals if requested
                                if (lcShowAnnot) {
                                    loadBarChartAnnotations(data, lcAnnot);
                                }

                                // load table data
                                var lcTable = $('#participants-by-lifecycle-table');
                                loadTableData(lcTable, data, 'Status');

                                // render plot, remove plotly link and stop spinner
                                Plotly.newPlot('plotly-participants-by-lifecycle', data, lcLayout, PLOTLY_OPTS);
                                removePlotlyLink('plotly-participants-by-lifecycle');
                                stopSpinner(spinnerLoc);

                                if (dialogType == 'modal') {
                                    $('#loading-modal').modal('hide');
                                }
                            } else {
                                setMetricsError(spinnerLoc);
                            }
                        });
                    }
                }


                var now = new Date().toISOString().split('T')[0];
                $('#lifecycle-end-date').val(now);

                // load plot on tab show (to save loading time)
                $('#participants-by-lifecycle-nav').on('shown.bs.tab', function (e) {
                    // if plot has not been shown yet, render and then store state
                    // this will prevent points render calls once map has been initialized
                    if (!PLOTS_SHOWN['participants-by-lifecycle-nav']) {
                        renderLcPlot('spinner');
                        PLOTS_SHOWN['participants-by-lifecycle-nav'] = true;
                    }
                });

                // re-render on filter change
                $('.lifecycle-plot-control').on('change', function() {
                    renderLcPlot('spinner');
                });

                // re-render on filter change with modal (for time changes, may need new metrics)
                $('.lifecycle-time-control').on('change', function() {
                    renderLcPlot('modal');
                });

                // re-render on window resizeEnd if tab is visible
                $( window ).on('resizeEnd', function() {
                    if ($('#plotly-participants-by-lifecycle').is(':visible')) {
                        renderLcPlot('');
                    }
                });

                $('#participants-by-lifecycle').find('.redraw-plotly').on('click', function() {
                    renderLcPlot('spinner');
                });
            </script>

        </div>
    </div>
    {% include 'dashboard/dashboard_help.html.twig' %}
    <script type="text/javascript">
        $('.datepicker').datetimepicker({
          format: 'YYYY-MM-DD',
          useCurrent: false,
          toolbarPlacement: 'top',
          sideBySide: true,
          showTodayButton: true,
          showClear: false,
          showClose: true,
          keyBinds: {
              up: null,
              down: null,
              left: null,
              right: null,
              'delete': null
          }
        });

        // Form field's 'change' event not fired automatically
        $('.datepicker').on('dp.change', function() {
          $(this).trigger('change');
        });

        $('[data-toggle="tooltip"]').tooltip({container: 'body'});

        $('.panel-collapse').on('show.bs.collapse hide.bs.collapse', function() {
            toggleGlyph($(this).prev().find('span.toggle-glyph'));
        });

        var centerFilterStatuses = {};

        function updateCenterFiltersStatuses() {

          $('.center-filter').each(function(index, element) {
            var centerFilter = $(element);
            var center = centerFilter.val();
            var isChecked = centerFilter.is(':checked') ? 1 : 0;
            centerFilterStatuses[center] = isChecked;
          });

        }

        $(document).on('change', '.center-filter', function() {
          updateCenterFiltersStatuses();
        });
    </script>
{% endblock %}
